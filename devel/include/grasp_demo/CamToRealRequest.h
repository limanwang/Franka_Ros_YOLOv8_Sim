// Generated by gencpp from file grasp_demo/CamToRealRequest.msg
// DO NOT EDIT!


#ifndef GRASP_DEMO_MESSAGE_CAMTOREALREQUEST_H
#define GRASP_DEMO_MESSAGE_CAMTOREALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasp_demo
{
template <class ContainerAllocator>
struct CamToRealRequest_
{
  typedef CamToRealRequest_<ContainerAllocator> Type;

  CamToRealRequest_()
    : pixel_x(0.0)
    , pixel_y(0.0)  {
    }
  CamToRealRequest_(const ContainerAllocator& _alloc)
    : pixel_x(0.0)
    , pixel_y(0.0)  {
  (void)_alloc;
    }



   typedef double _pixel_x_type;
  _pixel_x_type pixel_x;

   typedef double _pixel_y_type;
  _pixel_y_type pixel_y;





  typedef boost::shared_ptr< ::grasp_demo::CamToRealRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_demo::CamToRealRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CamToRealRequest_

typedef ::grasp_demo::CamToRealRequest_<std::allocator<void> > CamToRealRequest;

typedef boost::shared_ptr< ::grasp_demo::CamToRealRequest > CamToRealRequestPtr;
typedef boost::shared_ptr< ::grasp_demo::CamToRealRequest const> CamToRealRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_demo::CamToRealRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_demo::CamToRealRequest_<ContainerAllocator1> & lhs, const ::grasp_demo::CamToRealRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pixel_x == rhs.pixel_x &&
    lhs.pixel_y == rhs.pixel_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_demo::CamToRealRequest_<ContainerAllocator1> & lhs, const ::grasp_demo::CamToRealRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_demo::CamToRealRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_demo::CamToRealRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_demo::CamToRealRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f1ded65a8e7c18f92cd2452807e658e";
  }

  static const char* value(const ::grasp_demo::CamToRealRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f1ded65a8e7c18fULL;
  static const uint64_t static_value2 = 0x92cd2452807e658eULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_demo/CamToRealRequest";
  }

  static const char* value(const ::grasp_demo::CamToRealRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pixel_x\n"
"float64 pixel_y\n"
;
  }

  static const char* value(const ::grasp_demo::CamToRealRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pixel_x);
      stream.next(m.pixel_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CamToRealRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_demo::CamToRealRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_demo::CamToRealRequest_<ContainerAllocator>& v)
  {
    s << indent << "pixel_x: ";
    Printer<double>::stream(s, indent + "  ", v.pixel_x);
    s << indent << "pixel_y: ";
    Printer<double>::stream(s, indent + "  ", v.pixel_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_DEMO_MESSAGE_CAMTOREALREQUEST_H
